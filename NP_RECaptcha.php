<?php

/**
  * Nucleus: PHP/MySQL Weblog CMS (http://nucleuscms.org/) 
  * Copyright (C) 2002-2004 The Nucleus Group
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
  * as published by the Free Software Foundation; either version 2
  * of the License, or (at your option) any later version.
  * (see nucleus/documentation/index.html#license for more info)
  *
  * Plugin responsible for creating and checking captcha images
  *
  * Captcha image generation based on:
  *   - hn_captcha by Horst Nogajski
  *     (http://hn273.users.phpclasses.org/browse/package/1569.html)
  *   - ocr_captcha by Julien Pachet
  *     (http://new21.mirrors.phpclasses.org/browse/package/1538.html)
  *
  * The Dustismo font was created by Dustin Norlander
  *	(http://www.dustismo.com/)
  *
  * $Id: NP_Captcha.php,v 1.7 2005/02/26 11:32:43 dekarma Exp $
  */
  
/**
  * This class generates a picture to use in forms that perform CAPTCHA test
  * (Completely Automated Public Turing to tell Computers from Humans Apart).
  * After the test form is submitted a key entered by the user in a text field
  * is compared by the class to determine whether it matches the text in the picture.
  * 
  * The class is a fork of the original released at www.phpclasses.org
  * by Julien Pachet with the name ocr_captcha.
  * 
  * How the class works
  *
  * 1. generateKey()
  *		- creates a new entry in the nucleus_captcha table (marked as inactive)
  *		- returns the key for that entry
  *
  * 2. including in a form -> generateImgHtml($key, $width, $height) / generateImgUrl($key, $width, $height)
  *		- add a hidden field containing the key, as generated by generateId
  *		- add an image action.php?action=plugin&name=Captcha&type=captcha&key={key here}
  * 
  * 3. action.php?...key={key here} -> generateImage($key)
  *    action.php?...key={key here}&width={width}&height={height} -> generateImage($key, $w, $h)
  *		- checks if key exists
  *		- chooses a random solution, and stores an md5 hash of it in nucleus_captcha
  *		- mark the entry in nucleus_captcha as active
  *		- generates a captcha image, and returns it to the client
  *
  * 4. check($key, $solution)
  *		- check if key exists, and if the captcha has been activated 
  *		- check if md5($solution) corresponds to the database entry.
  *		- delete entry in database (implies that only one try is allowed. when
  *       the answer is incorrect, a new captcha needs to be generated)
  *
  * Other plugins can generate/include/check captchas using the methods listed
  * above 
  *
  * e.g.
  *    global $manager
  *	   $npcaptcha =& $manager->getPlugin('NP_Captcha');
  *    $key = $npcaptcha->generateKey();
  *    $imgHtml = $npcatcha->getImgHtml($key);
  *    ...output imgHtml, hidden field with key, anwser field...
  *    ...
  *    $key = postVar('keyfield');
  *	   $sol = postVar('solutionfield');
  *    if ($npcaptcha->check($key, $sol)) ...
  * 
  * NP_RECaptcha version History
  *		v1.0 [2007-05-26 Lord Matt]
  *			- Branched to make RECaptcha.  
  * NP_Captcha version history
  *		v1.2 [2005-02-26 dekarma]
  *			- Availability of GD library could not be checked if phpinfo was forbidden (expose_php Off)
  *			- Availability of GD library is checked in a more performant way
  *		v1.1 [2004-08-13 dekarma]
  *			- moved the generated HTML and error message into plugin options
  *		v1.0 [2004-08-12 dekarma]
  *			- added captcha image to account activation form
  *		v0.9 [2004-08-08 dekarma]
  *			- switched to jpeg images (about 3KB for an image compared to 10KB for png)
  *			- added plugin options:
  *				- jpeg quality
  *				- min number of chars
  *				- grid or noise?
  *				- websafe colors?
  *				- font(s)
  *				- cleanup time
  *			- added comments
  *			- when no GD library available, the plugin does nothing
  *			- instead of dying on errors, an image is generated with the error message.
  *			  (captcha is not activated when such an error occurs)
  *		v0.1 [2004-08-07 dekarma]
  *			- initial version. png images
  *
  **/
require_once($DIR_PLUGINS . 'recaptcha/recaptchalib.php');
class NP_RECaptcha extends NucleusPlugin {

	// put your vars at the top dag-nam-it!
	var $spam = false;
	var $error = '';
	
	function getName() {       return 'RE:Captcha';	}
	function getAuthor()  {    return 'Lord Matt based on work by the Nucleus CMS Team';	}
	function getURL(){         return 'http://wiki.lordmatt.co.uk/index.php/RECaptcha';	}
	function getVersion() {    return '1.0'; }
	function getMinNucleusVersion() { return 320; }
	function getMinNucleusPatchLevel() { return 0; }
	function getEventList() {  return array('FormExtra', 'ValidateForm', 'PreComment'); }
	function getDescription() 
	{
		return 'Adds re:captcha challenge to anonymous comment and registration forms, to prevent robots from spamming whilst helping to digistise old books.';
	}
	

	function supportsFeature($what) 
	{
		switch ($what)
		{
			case 'SqlTablePrefix':
			case 'HelpPage':
				return 0;
			case 'handleSpam':
				return $this->getOption('OperatingMode') == 'spam';
			default:
				return 0;
		}
	}
	
	function init() {
		global $recaptcha_api_server, $recaptcha_api_secure_server, $recaptcha_verify_server;
		// recaptcha expects to find these in the global scope so we put them there.
			$recaptcha_api_server = 'http://api.recaptcha.net';
			$recaptcha_api_secure_server = 'https://api-secure.recaptcha.net';
			$recaptcha_verify_server = 'api-verify.recaptcha.net';
	}
	

	function install() {

        //$basicMessage = "<p>By solving this you not only prove you are human but help to digitise very old books<br /><%recaptcha-></p>";
        
		//$activationHtml = $basicMessage;
		//$commentFormHtml = $basicMessage;
		//$mailFormHtml = $basicMessage;

		$emailHtml = "<p>Email This Person: <%emailhtml%></p>";
        
		$this->createOption('OperatingMode', 'Show Captcha', 'select', 'always', 'always|always|when suspecting spam|spam');	
		$this->createOption('PublicKey', 'Free RE:Captcha PublicKey', 'text', '', '');
		$this->createOption('PrivateKey', 'Free RE:Captcha PrivateKey', 'text', '', '');
		$this->createOption('mPublicKey', 'Free RE:Captcha-Mailhide PublicKey', 'text', '', '');
		$this->createOption('mPrivateKey', 'Free RE:Captcha-Mailhide PrivateKey', 'text', '', '');
		$this->createOption('FixCSSBug', 'type "YES" (without quotes) to auto fix CSS bug (some CSS breaks box)', 'text', 'YES', '');
		$this->createOption('FailedMsg', 'Error message', 'text', 'Captcha challenge failed. Are you man or machine?', '');
		//$this->createOption('ActivationHtml', 'Activation Form Template', 'textarea', $activationHtml, '');
		//$this->createOption('CommentFormHtml', 'Comment Form Template', 'textarea', $commentFormHtml, '');
		//$this->createOption('MemberMailHtml', 'Mail Form Template', 'textarea', $mailFormHtml, '');
		$this->createOption('eMailHtml', 'custom eMail link. before c_body, blank to disable', 'textarea', $emailHtml, '');
	}
	




	/**
	 * Called from e.g. the commentform-notloggedin.template file, at the time
	 * a comment form is included. We'll add HTML code to insert the captcha image
	 */
	function event_FormExtra(&$data) {
		
		if ($this->getOption('OperatingMode') != 'spam' || $this->spam == true)
		{
			switch ($data['type'])
			{
				case 'commentform-notloggedin':			// anonymous comments
				case 'membermailform-notloggedin':		// anonymous message to site member
				case 'activation':						// activation or re-activation of member account
					break;
				default:
					return;
			}
			$recaptcha_html = "";
			// due to standards aware browsers doing the correct thing these days
			// some tables designs break - this is the best hope to fix it
			// for some reason the "default skin" breaks the fix so we reapply it
			if ($this->getOption('FixCSSBug') == "YES"){
				$recaptcha_html .= "
				<style><!--
				.commentform #recaptcha .recaptchatable td img, .commentform  .recaptchatable td img, #recaptcha  .recaptchatable td img{
					vertical-align: bottom;
					margin-top:0px;
				}
				--></style>
				";
			}
			$recaptcha_html .= "<div id=\"recaptcha\">" . recaptcha_get_html($this->getOption('PublicKey'), $this->error) . "</div>";
			//echo "<!-- $recaptcha_html -->";		
			switch ($data['type'])
			{
				case 'activation':
				case 'commentform-notloggedin':	
				case 'membermailform-notloggedin':
				echo $recaptcha_html;
					break;
				default:
					return;
			}
		}
	}
	
	/**
	 * Called when a comment or member mail message is validated. We'll check if the 
	 * provided captcha solution is correct here. If not, we'll return an error.
	 */
	function event_ValidateForm(&$data) {
	
		global $member, $errormessage;

		switch ($data['type'])
		{
			case 'comment':
			case 'membermail':
			case 'activation':
				break;
			default:
				return;
		}

			
		// captchas are not used for registered members
		if ($member->isLoggedIn()){
			return;
		}
		
		
		
		
		// get key and attempted solution from request
		//$ver_key = postVar('ver_key');
		//$ver_sol = postVar('ver_sol');
		
		
		if ($this->getOption('OperatingMode') != 'spam')
		{
			// check if the solution matches what is in the database
			if (!$this->valid()){
				$data['error'] = $this->getOption('FailedMsg');
				$data['error-code'] = $this->error;
			}
		}
		else
		{
			if (isset($data['spamcheck']['result']) && $data['spamcheck']['result'] == true)
			{
				if (!$this->valid())
				{
					$this->spam = true;
					$errormessage = 'This comment was marked as spam, if you believe this is incorrect please try again';
					
					unset($_REQUEST['action']);
					unset($_POST['action']);
					unset($_GET['action']);
					
					$data['error-code'] = $this->error;
						
					selector();
					exit;
				}
				else
				{
					$data['spamcheck']['result'] = false;
					unset($data['spamcheck']['plugin']);
					unset($data['spamcheck']['message']);
				}
			}
		}
	}


	function valid(){
		//global $error;
		if ($_POST["recaptcha_response_field"]) {
			$resp = recaptcha_check_answer ($this->getOption('PrivateKey'),
											  $_SERVER["REMOTE_ADDR"],
											  $_POST["recaptcha_challenge_field"],
											  $_POST["recaptcha_response_field"]);
			
			if ($resp->is_valid) {
				//You got it!
				return true;
			} else {
				# set the error code so that we can display it
				$this->error = $resp->error;
				return false;
			}
		}else{
			$this->error = 'NUCLEUSCMS-ERROR: no values found';
			return false;
		}
	
	}
	
	function event_PreComment(&$data){
		//print_r($data);
		$check = $data['userid'];
		$body = $data['body'];

		if (isValidMailAddress($check)){
			
			$aVars = array('emailhtml' => convert_email_to_html($check) );
			if ($this->getOption('eMailHtml') !== ''){
				$data['body'] = TEMPLATE::fill($this->getOption('eMailHtml') . $body, $aVars);
				$data['userid'] = '';
			}else{
				$data['userid'] = convert_email_to_url($check);
			}
		}
	}
	
	
	
	
	
	function convert_email_to_html($email){
		return recaptcha_mailhide_html ($this->getOption('mPublicKey'),
								  $this->getOption('mPrivateKey'),
								  $email);
	}	
	
	function convert_email_to_url($email){
		return recaptcha_mailhide_url ($this->getOption('mPublicKey'),
								 $this->getOption('mPrivateKey'),
								 $email);
	}

}
?>